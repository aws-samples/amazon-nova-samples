AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for deploying the ACBT QA Testing Web Application to S3 with CloudFront - CFN-Guard compliant for demo use case'

Parameters:
  BucketName:
    Type: String
    Default: acbt-qa-testing-webapp
    Description: Name of the S3 bucket to store the web application files (must be globally unique)

  CreateCloudFront:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to create a CloudFront distribution for the web application

  CloudFrontPriceClass:
    Type: String
    Default: 'PriceClass_100'
    AllowedValues:
      - 'PriceClass_100'
      - 'PriceClass_200'
      - 'PriceClass_All'
    Description: Price class for CloudFront distribution (100 for US/Europe, 200 adds Asia/Africa, All is global)

  EnableAccessLogging:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable access logging for S3 and CloudFront (adds minimal cost for monitoring)

Conditions:
  CreateCloudfrontResources: !Equals [!Ref CreateCloudFront, 'true']
  EnableLogging: !Equals [!Ref EnableAccessLogging, 'true']
  CreateLoggingBucket: !And
    - !Condition CreateCloudfrontResources
    - !Condition EnableLogging

Resources:
  # S3 bucket for access logs (CloudFront and S3)
  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateLoggingBucket
    Metadata:
      guard:
        SuppressedRules:
          - "S3_BUCKET_LOGGING_ENABLED" # Access logging Bucket does not require another logging bucket
          - "BUCKET_VERSIONING_ENABLED" # Versioning not required for demo static content that rarely changes
          - "S3_BUCKET_DEFAULT_LOCK_ENABLED" # Object lock not needed for demo website, adds unnecessary storage costs
          - "S3_BUCKET_REPLICATION_ENABLED" # Cross-region replication not cost-effective for demo use case
    Properties:
      BucketName: !Sub '${BucketName}-access-logs'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 30

  # S3 bucket for hosting the web application
  WebAppBucket:
    Type: AWS::S3::Bucket
    # cfn-guard suppressions for demo use case
    # cfn-guard:skip=S3_BUCKET_VERSIONING_ENABLED: Versioning not required for demo static content that rarely changes
    # cfn-guard:skip=S3_BUCKET_DEFAULT_LOCK_ENABLED: Object lock not needed for demo website, adds unnecessary storage costs
    # cfn-guard:skip=S3_BUCKET_REPLICATION_ENABLED: Cross-region replication not cost-effective for demo use case
    # checkov:skip=CKV_AWS_21: S3 versioning not required for this static website hosting use case
    Metadata:
      guard:
        SuppressedRules:
          - "S3_BUCKET_VERSIONING_ENABLED" # Versioning not required for demo static content that rarely changes
          - "S3_BUCKET_DEFAULT_LOCK_ENABLED" # Object lock not needed for demo website, adds unnecessary storage costs
          - "S3_BUCKET_REPLICATION_ENABLED" # Cross-region replication not cost-effective for demo use case
    Properties:
      BucketName: !Ref BucketName
      AccessControl: !If [CreateCloudfrontResources, Private, PublicRead]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      LoggingConfiguration: !If
        - EnableLogging
        - DestinationBucketName: !Ref AccessLogsBucket
          LogFilePrefix: s3-access-logs/
        - !Ref 'AWS::NoValue'
      WebsiteConfiguration: !If
        - CreateCloudfrontResources
        - !Ref 'AWS::NoValue'
        - IndexDocument: index.html
          ErrorDocument: index.html

  # CloudFront Origin Access Control
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Condition: CreateCloudfrontResources
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${BucketName}-OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: CreateCloudfrontResources
    # cfn-guard suppressions for demo use case
    # cfn-guard:skip=CLOUDFRONT_CUSTOM_SSL_CERTIFICATE: CloudFront default certificate sufficient for demo website
    # cfn-guard:skip=CLOUDFRONT_ORIGIN_FAILOVER_ENABLED: Origin failover not needed for demo website, adds complexity
    # cfn-guard:skip=CLOUDFRONT_SNI_ENABLED: SNI not required when using CloudFront default certificate
    # cfn-guard:skip=CLOUDFRONT_MINIMUM_PROTOCOL_VERSION_RULE: TLS 1.2 already configured with MinimumProtocolVersion
    # checkov:skip=CKV_AWS_174: CloudFront distribution does not require WAF for this static website hosting use case
    # checkov:skip=CKV_AWS_68: CloudFront Distribution should have WAF enabled - not required for static website hosting use case
    Metadata:
      guard:
        SuppressedRules:
          - "CLOUDFRONT_CUSTOM_SSL_CERTIFICATE" ## CloudFront default certificate sufficient for demo website
          - "CLOUDFRONT_MINIMUM_PROTOCOL_VERSION_RULE" ## TLS 1.2 already configured with MinimumProtocolVersion
          - "CLOUDFRONT_SNI_ENABLED" ## SNI not required when using CloudFront default certificate
          - "CLOUDFRONT_ORIGIN_FAILOVER_ENABLED" #Origin failover not needed for demo website, adds complexity
          
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebAppBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig: {}
            OriginAccessControlId: !Ref CloudFrontOAC

        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          TrustedSigners: []
        PriceClass: !Ref CloudFrontPriceClass
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: TLSv1.2_2021
        
        # Optional CloudFront access logging
        Logging: !If
          - EnableLogging
          - Bucket: !GetAtt AccessLogsBucket.DomainName
            IncludeCookies: false
            Prefix: cloudfront-logs/
          - !Ref 'AWS::NoValue'
        
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

  # Bucket policy - will be updated depending on whether we use CloudFront
  WebAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Metadata:
      guard:
        SuppressedRules:
         - "S3_BUCKET_SSL_REQUESTS_ONLY" # This statement is already defined in the Web App bucket policy
    Properties:
      Bucket: !Ref WebAppBucket
      PolicyDocument:
        Statement:
          - !If
            - CreateCloudfrontResources
            - Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: 's3:GetObject'
              Resource: !Sub 'arn:aws:s3:::${WebAppBucket}/*'
              Condition:
                StringEquals:
                  AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
            - Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Sub 'arn:aws:s3:::${WebAppBucket}/*'
          # SSL-only access policy (addresses S3_BUCKET_SSL_REQUESTS_ONLY)
          - Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: 
              - !Sub 'arn:aws:s3:::${WebAppBucket}/*'
              - !Sub 'arn:aws:s3:::${WebAppBucket}'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

Outputs:
  WebsiteURL:
    Description: URL for the website
    Value: !If
      - CreateCloudfrontResources
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
      - !Sub 'http://${WebAppBucket.WebsiteURL}'

  S3BucketName:
    Description: Name of the S3 bucket storing the website content
    Value: !Ref WebAppBucket

  AccessLogsBucketName:
    Description: Name of the S3 bucket storing access logs (if enabled)
    Value: !If
      - CreateLoggingBucket
      - !Ref AccessLogsBucket
      - 'Logging not enabled'

  CloudFrontDistributionID:
    Description: ID of the CloudFront distribution
    Value: !If
      - CreateCloudfrontResources
      - !Ref CloudFrontDistribution
      - 'N/A'
    Condition: CreateCloudfrontResources

  SecurityNotes:
    Description: Security features and suppressions applied
    Value: !Sub
      - 'SSL-Only Access: Enabled, Access Logging: ${Logging}, CFN-Guard Suppressions: Applied for demo use case'
      - Logging: !If [EnableLogging, 'Enabled', 'Disabled']
